import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

def parachute_jump(t, x):
    y, v = x
    if y > 500:  
        k = drag_k_freefall
    else:
        k = drag_k_parachute
    dydt = v
    dvdt = -(g - k*p*(v**2))
    print(f"At time {t:.2f}s, height = {y:.2f}m, velocity = {v:.2f}m/s, drag coeff = {k:.3f}")
    return [dydt, dvdt]


# Drag coefficients in m^2 per kg
drag_k_freefall = 0.003
drag_k_parachute = 0.15

# Gravity and air density
g = 9.81
p = 1.226

# Set initial conditions
y = 4000
v = 0
x = np.array([y, v])

# Time span
t_span = (0, 100)
t_eval = np.linspace(0, 100, 1000)

# Solve the ODE
sol = solve_ivp(parachute_jump, t_span, x, rtol=1e-8, atol=1e-8, t_eval=t_eval)

n_ground = np.argmax(sol.y[0] < 0) if np.any(sol.y[0] < 0) else -1
t_ground = sol.t[n_ground] if n_ground != -1 else sol.t[-1]

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6,5))
fig.tight_layout(pad=3.0)

if n_ground != -1:
    range_limit = n_ground
else:
    range_limit = len(sol.t)

ax1.plot(sol.t[:range_limit], sol.y[0][:range_limit], 'r-')
ax1.set_xlabel('Time (s)', fontsize=10)
ax1.set_ylabel('Height (m)', fontsize=10)
ax1.set_title('Height vs Time', fontsize=16)
ax1.grid(which='both')

ax2.plot(sol.t[:range_limit], sol.y[1][:range_limit], 'b-')
ax2.set_xlabel('Time (s)', fontsize=10)
ax2.set_ylabel('Velocity (m/s)', fontsize=10)
ax2.set_title('Velocity vs Time', fontsize=16)
ax2.grid(which='both')

plt.show()
